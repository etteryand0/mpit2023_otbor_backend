// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donation {
  id        String   @id @default(cuid())
  amount    Int
  message   String?
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  date      DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  reward    Reward?  @relation(fields: [rewardId], references: [id])
  rewardId  String?
}

model Reward {
  id          String  @id @default(cuid())
  title       String
  description String
  price       Int
  project     Project @relation(fields: [projectId], references: [id])
  projectId   String

  deliveryFrom String?
  donations    Donation[]
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique

  projects Project[]
}

model Kid {
  id        String    @id @default(cuid())
  name      String
  age       Int
  biography String?
  location  String?
  avatar    String?
  links     String[]
  projects  Project[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Project {
  id                String     @id @default(cuid())
  owner             User       @relation(fields: [ownerId], references: [id], name: "projectOwner")
  ownerId           String
  likes             User[]     @relation(name: "projectLiked")
  donations         Donation[]
  // scenario 1
  title             String
  promo_media       String
  short_description String
  categories        Category[]
  goal              Int
  collectedAmount   Int        @default(0)
  dueDate           DateTime

  // scenario 2. Rich text
  content String?

  // scenario 3
  rewards Reward[]

  // scenario 4
  kid   Kid    @relation(fields: [kidId], references: [id])
  kidId String

  published Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  id    String @id @default(cuid())
  email String @unique

  password  String
  name      String?
  donations Donation[]
  projects  Project[]  @relation(name: "projectOwner")
  liked     Project[]  @relation(name: "projectLiked")
  kids      Kid[]
}
